subscription SubgraphEvents(
  $skip: Int = 0
  $first: Int = 1000
  $colonyAddress: String!
  $sortDirection: String = asc
) {
  events(
    skip: $skip
    first: $first
    orderBy: "timestamp"
    orderDirection: $sortDirection
    where: { associatedColony: $colonyAddress }
  ) {
    id
    address
    associatedColony {
      colonyAddress: id
      id: colonyChainId
      token {
        address: id
        decimals
        symbol
      }
    }
    transaction {
      hash: id
      block {
        id
        timestamp
      }
    }
    name
    args
    timestamp
  }
}

subscription SubgraphOneTx(
  $skip: Int = 0
  $first: Int = 1000
  $colonyAddress: String!
  $sortDirection: String = asc
) {
  oneTxPayments(
    skip: $skip
    first: $first
    orderBy: "timestamp"
    orderDirection: $sortDirection
    where: { payment_contains: $colonyAddress }
  ) {
    id
    agent
    transaction {
      hash: id
      block {
        id
        timestamp
      }
    }
    payment {
      to
      domain {
        ethDomainId: domainChainId
        name
      }
      fundingPot {
        fundingPotPayouts {
          id
          token {
            address: id
            symbol
            decimals
          }
          amount
        }
      }
    }
    timestamp
  }
}

subscription SubgraphEventsThatAreActions(
  $skip: Int = 0
  $first: Int = 1000
  $colonyAddress: String!
  $sortDirection: String = asc
) {
  events(
    skip: $skip
    first: $first
    orderBy: "timestamp"
    orderDirection: $sortDirection
    where: {
      associatedColony_contains: $colonyAddress
      name_in: [
        "TokensMinted(address,address,uint256)"
        "DomainAdded(address,uint256)"
        "ColonyMetadata(address,string)"
        "ColonyFundsMovedBetweenFundingPots(address,uint256,uint256,uint256,address)"
        "DomainMetadata(address,uint256,string)"
        "ColonyRoleSet(address,address,uint256,uint8,bool)"
        "ColonyUpgraded(address,uint256,uint256)"
        "ColonyUpgraded(uint256,uint256)"
        "RecoveryModeEntered(address)"
        "ArbitraryReputationUpdate(address,address,uint256,int256)"
        "TokenUnlocked(address)"
        "TokenUnlocked()"
      ]
    }
  ) {
    id
    address
    associatedColony {
      colonyAddress: id
      id: colonyChainId
      token {
        address: id
        decimals
        symbol
      }
    }
    transaction {
      hash: id
      block {
        id
        timestamp
      }
    }
    name
    args
    timestamp
    processedValues @client {
      agent
      who
      fromPot
      fromDomain
      toPot
      toDomain
      domainId
      amount
      token
      metadata
      user
      oldVersion
      newVersion
      storageSlot
      storageSlotValue
    }
  }
}

subscription SubgraphMotions(
  $skip: Int = 0
  $first: Int = 1000
  $colonyAddress: String!
  $extensionAddress: String!
  $motionAction: String
  $motionActionNot: String
) {
  motions(
    skip: $skip
    first: $first
    where: {
      associatedColony: $colonyAddress
      extensionAddress: $extensionAddress
      action: $motionAction
      action_not: $motionActionNot
    }
  ) {
    id
    fundamentalChainId
    associatedColony {
      colonyAddress: id
      id: colonyChainId
      token {
        address: id
        decimals
        symbol
      }
    }
    transaction {
      hash: id
      block {
        id
        timestamp
      }
    }
    extensionAddress
    agent
    domain {
      ethDomainId: domainChainId
      name
    }
    stakes
    requiredStake
    escalated
    action
    state @client
    type @client
    args @client {
      amount
      token {
        address: id
        symbol
        decimals
      }
    }
    timeoutPeriods @client {
      timeLeftToStake
      timeLeftToSubmit
      timeLeftToReveal
      timeLeftToEscalate
    }
  }
}

subscription SubgraphDecisions(
  $skip: Int = 0
  $first: Int = 1000
  $colonyAddress: String!
  $extensionAddress: String!
  $motionAction: String
) {
  motions(
    skip: $skip
    first: $first
    where: {
      associatedColony: $colonyAddress
      extensionAddress: $extensionAddress
      action: $motionAction
    }
  ) {
    id
    fundamentalChainId
    associatedColony {
      colonyAddress: id
      id: colonyChainId
      token {
        address: id
        decimals
        symbol
      }
    }
    transaction {
      hash: id
      block {
        id
        timestamp
      }
    }
    extensionAddress
    agent
    domain {
      ethDomainId: domainChainId
      name
    }
    stakes
    requiredStake
    escalated
    action
    state @client
    type @client
    args @client {
      amount
      token {
        address: id
        symbol
        decimals
      }
    }
    timeoutPeriods @client {
      timeLeftToStake
      timeLeftToSubmit
      timeLeftToReveal
      timeLeftToEscalate
    }
    annotationHash @client
  }
}
