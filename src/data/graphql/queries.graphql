query Task($id: String!) {
  task(id: $id) {
    id
    ...Payouts
    assignedWorker {
      id
      profile {
        avatarHash
        displayName
        username
        walletAddress
      }
    }
    assignedWorkerAddress
    cancelledAt
    colonyAddress
    commentCount @client
    createdAt
    creator {
      id
      profile {
        avatarHash
        displayName
        username
        walletAddress
      }
    }
    creatorAddress
    description
    dueDate
    ethDomainId
    ethSkillId
    ethPotId
    events {
      id
      type
    }
    finalizedAt
    title
    workInvites {
      id
      profile {
        avatarHash
        displayName
        username
        walletAddress
      }
    }
    workInviteAddresses
    workRequests {
      id
      profile {
        avatarHash
        displayName
        username
        walletAddress
      }
    }
    workRequestAddresses
    txHash
  }
}

query TaskToEdit($id: String!) {
  task(id: $id) {
    id
    ...Payouts
    assignedWorker {
      id
      profile {
        avatarHash
        displayName
        username
        walletAddress
      }
    }
    workRequests {
      id
      profile {
        avatarHash
        displayName
        username
        walletAddress
      }
    }
  }
}

query TaskFeedEvents($id: String!) {
  task(id: $id) {
    id
    colonyAddress
    events {
      ...TaskEvent
    }
    ethDomainId
    ethPotId
    finalizedAt
    txHash
    finalizedPayment @client {
      amount
      tokenAddress
      workerAddress
      transactionHash
    }
    ...Payouts
  }
}

query LoggedInUser {
  loggedInUser @client {
    walletAddress
    balance
    username
    ethereal
    networkId
  }
}

query User($address: String!) {
  user(address: $address) {
    id
    profile {
      username
      walletAddress
      displayName
      bio
      location
      website
      avatarHash
    }
  }
}

# This isn't currently being used anywhere, but... here it is anyways.
# In most cases, we'll want to fetch the reputation *after* the user is already fetched,
# as fetching reputation takes quite a bit longer.
query UserWithReputation($address: String!, $colonyAddress: String!, $domainId: Int) {
  user(address: $address) {
    id
    profile {
      username
      walletAddress
      displayName
      bio
      location
      website
      avatarHash
    }
    reputation(colonyAddress: $colonyAddress, domainId: $domainId) @client
  }
}

query UserReputation($address: String!, $colonyAddress: String!, $domainId: Int) {
  userReputation(address: $address, colonyAddress: $colonyAddress, domainId: $domainId) @client
}

query UserTasks($address: String!) {
  user(address: $address) {
    id
    tasks {
      id
      ...Payouts
      assignedWorker {
        id
        profile {
          avatarHash
        }
      }
      assignedWorkerAddress
      cancelledAt
      colonyAddress
      commentCount @client
      createdAt
      creatorAddress
      dueDate
      ethDomainId
      ethSkillId
      events {
        id
        type
      }
      finalizedAt
      title
      workRequestAddresses
      txHash
    }
  }
}

query UserTokens($address: String!) {
  user(address: $address) {
    id
    tokenAddresses
    tokens(walletAddress: $address) @client {
      id
      address
      iconHash
      decimals
      name
      symbol
      balance
    }
  }
}

query Username($address: String!) {
  username(address: $address) @client
}

query UserAddress($name: String!) {
  userAddress(name: $name) @client
}

query TokenBalancesForDomains($colonyAddress: String!, $tokenAddresses: [String!]!, $domainIds: [Int!]) {
  tokens(addresses: $tokenAddresses) @client {
    id
    address
    iconHash
    decimals
    name
    symbol
    balances(colonyAddress: $colonyAddress, domainIds: $domainIds) {
      domainId
      amount
    }
  }
}

query UserColonies($address: String!) {
  user(address: $address) {
    id
    processedColonies @client {
      id
      avatarHash
      avatarURL
      colonyAddress
      colonyName
      displayName
    }
    colonyAddresses
  }
}

query UserColonyAddresses($address: String!) {
  user(address: $address) {
    id
    colonyAddresses
  }
}

query Token($address: String!) {
  token(address: $address) @client {
    id
    address
    iconHash
    decimals
    name
    symbol
  }
}

query TokenInfo($address: String!) {
  tokenInfo(address: $address) {
    decimals
    name
    symbol
    iconHash
  }
}

query UserNotifications($address: String!) {
  user(address: $address) {
    id
    notifications {
      id
      event {
        id
        type
        createdAt
        initiatorAddress
        sourceId
        sourceType
        ...EventContext
      }
      read
    }
  }
}

query SystemInfo {
  systemInfo {
    version
  }
}

query NetworkContracts {
  networkContracts @client {
    version
    feeInverse
  }
}

query ColonyAction($transactionHash: String!, $colonyAddress: String!) {
  colonyAction(transactionHash: $transactionHash, colonyAddress: $colonyAddress) @client {
    hash
    actionInitiator
    fromDomain
    toDomain
    recipient
    status
    events {
      name
      values
      createdAt
      emmitedBy
    }
    createdAt
    actionType
    amount
    tokenAddress
    annotationHash
    newVersion
    oldVersion
    colonyDisplayName
    colonyAvatarHash
    colonyTokens
    domainName
    domainPurpose
    domainColor
  }
}

query TransactionMessages($transactionHash: String!) {
  transactionMessages(transactionHash: $transactionHash) {
    transactionHash
    messages {
    	...TransactionMessage
    }
  }
}

query TransactionMessagesCount($colonyAddress: String!) {
  transactionMessagesCount(colonyAddress: $colonyAddress) {
    colonyTransactionMessages {
      transactionHash
      count
    }
  }
}

query MetaColony {
  processedMetaColony @client {
    id
    colonyAddress
    colonyName
    displayName
    avatarHash
    avatarURL
  }
}

# The Graph
#
# @NOTE All queries meant for the subgraph should be prepended with `Subgraph`
# otherwise they will be sent to our own graphql server
# Prepending them with `Subgraph` allows the client to decide what endpoint to use

query SubgraphActions($skip: Int!, $first: Int!, $colonyAddress: String!) {
  oneTxPayments(skip: $skip, first: $first, where: { payment_contains: $colonyAddress }) {
    id
    agent
    transaction {
      hash: id
      block {
        id
        timestamp
      }
    }
    payment {
      to
      domain {
        ethDomainId: domainChainId
        name
      }
      fundingPot {
        fundingPotPayouts {
          id
          token {
            address: id
            symbol
            decimals
          }
          amount
        }
      }
    }
  }
  events(where: {
    associatedColony_contains: $colonyAddress,
    name_in: [
      "TokensMinted(address,address,uint256)",
      "DomainAdded(address,uint256)",
      "ColonyMetadata(address,string)",
      "ColonyFundsMovedBetweenFundingPots(address,uint256,uint256,uint256,address)",
      "DomainMetadata(address,uint256,string)"
    ] }) {
    id
    transaction {
      hash: id
      block {
        timestamp
      }
    }
    associatedColony {
      token {
        decimals
        symbol
      }
    }
    args
    address # Address of the contract that emitted the event
    name
  }
}

query SubgraphDomains($colonyAddress: String!) {
  domains(where: { colonyAddress: $colonyAddress }) {
    id
    domainChainId
    parent {
      id
      domainChainId
    }
    name
    colonyAddress
    metadata
    metadataHistory {
      id
      metadata
    }
  }
}

query SubgraphDomainMetadata($colonyAddress: String!, $domainId: Int!) {
  domains(where: { colonyAddress: $colonyAddress, domainChainId: $domainId }) {
    id
    domainChainId
    metadata
    metadataHistory {
      id
      metadata
      transaction {
        id
        block {
          timestamp
        }
      }
    }
  }
}

query SubgraphSingleDomain($colonyAddress: String!, $domainId: Int!) {
  domains(where: { colonyAddress: $colonyAddress, domainChainId: $domainId }) {
    id
    domainChainId
    parent {
      id
      domainChainId
    }
    name
    colonyAddress
    metadata
    metadataHistory {
      id
      metadata
    }
  }
}

query ColonyName($address: String!) {
  colonyName(address: $address) @client
}

query ColonyAddress($name: String!) {
  colonyAddress(name: $name) @client
}

query SubgraphColony($address: String!) {
  colony(id: $address) {
    id
    colonyChainId
    ensName
    metadata
    token {
      tokenAddress: id
      decimals
      symbol
    }
  }
}

query SubgraphColonies($colonyAddresses: [String]!) {
  colonies(
    where: { id_in: $colonyAddresses },
    orderBy: "colonyChainId",
    orderDirection: "asc"
  ) {
    id
    colonyChainId
    ensName
    metadata
    metadataHistory {
      id
      metadata
    }
    token {
      tokenAddress: id
      decimals
      symbol
    }
  }
}

query SubgraphColonyMetadata($address: String!) {
  colony(id: $address) {
    id
    colonyChainId
    metadata
    metadataHistory {
      id
      metadata
      transaction {
        id
        block {
          timestamp
        }
      }
    }
  }
}

query ColonyFromName($name: String!, $address: String!) {
  colonyAddress(name: $name) @client @export(as: "address")
  # NOTE: This calls SubgraphColony internally
  processedColony(address: $address) @client {
    ...FullColony
  }
}

query ColonyDomains($colonyAddress: String!) {
  processedColony(address: $colonyAddress) @client {
    id
    domains @client {
      ...DomainFields
    }
  }
}

query ColonySingleDomain($colonyAddress: String!, $domainId: Int!) {
  colonyDomain(colonyAddress: $colonyAddress, domainId: $domainId) @client {
    ...DomainFields
  }
}

query ProcessedColony($address: String!) {
  # NOTE: This calls SubgraphColony internally
  processedColony(address: $address) @client {
    ...FullColony
  }
}

query ColonyNativeToken($address: String!) {
  processedColony(address: $address) @client {
    id
    nativeTokenAddress
  }
}

query ColonyTransfers($address: String!) {
  processedColony(address: $address) @client {
    id
    colonyAddress
    transfers @client {
      amount
      hash
      colonyAddress
      date
      from
      hash
      incoming
      to
      token
    }
    unclaimedTransfers @client {
      amount
      hash
      colonyAddress
      date
      from
      hash
      incoming
      to
      token
    }
  }
}

query ColonyProfile($address: String!) {
  processedColony(address: $address) @client {
    ...ColonyProfile
  }
}

query ColonySubscribedUsers($colonyAddress: String!) {
  subscribedUsers(colonyAddress: $colonyAddress) {
    id
    profile {
      avatarHash
      displayName
      username
      walletAddress
    }
  }
}

query ColonyMembersWithReputation($colonyAddress: String!, $domainId: Int) {
  colonyMembersWithReputation(colonyAddress: $colonyAddress, domainId: $domainId) @client
}

query SubgraphEvents($skip: Int!, $first: Int!, $colonyAddress: String!) {
  events(skip: $skip, first: $first, where: { associatedColony: $colonyAddress }) {
    id
    address
    associatedColony {
      colonyAddress: id
      id: colonyChainId
    }
    transaction {
      hash: id
      block {
        id
        timestamp
      }
    }
    name
    args
  }
}
