
query LoggedInUser {
  loggedInUser @client {
    walletAddress
    balance
    username
    ethereal
    networkId
  }
}

query User($address: String!) {
  user(address: $address) {
    id
    profile {
      username
      walletAddress
      displayName
      bio
      location
      website
      avatarHash
    }
  }
}

# This isn't currently being used anywhere, but... here it is anyways.
# In most cases, we'll want to fetch the reputation *after* the user is already fetched,
# as fetching reputation takes quite a bit longer.
query UserWithReputation($address: String!, $colonyAddress: String!, $domainId: Int) {
  user(address: $address) {
    id
    profile {
      username
      walletAddress
      displayName
      bio
      location
      website
      avatarHash
    }
    reputation(colonyAddress: $colonyAddress, domainId: $domainId) @client
  }
}

query UserReputation($address: String!, $colonyAddress: String!, $domainId: Int, $rootHash: String) {
  userReputation(address: $address, colonyAddress: $colonyAddress, domainId: $domainId, rootHash: $rootHash) @client
}

query UserTokens($address: String!) {
  user(address: $address) {
    id
    tokenAddresses
    tokens(walletAddress: $address) @client {
      id
      address
      iconHash
      decimals
      name
      symbol
      balance
    }
  }
}

query UserBalanceWithLock($address: String!, $tokenAddress: String!, $colonyAddress: String!) {
  user(address: $address) {
    id
    userLock(walletAddress: $address, tokenAddress: $tokenAddress, colonyAddress: $colonyAddress) @client {
      balance
      nativeToken {
        decimals
        name
        symbol
        balance
        address
        verified
      }
      totalObligation
      pendingBalance
      activeTokens
    }
  }
}

query Username($address: String!) {
  username(address: $address) @client
}

query UserAddress($name: String!) {
  userAddress(name: $name) @client
}

query ColonyExtensions($address: String!) {
  processedColony(address: $address) @client {
    id
    colonyAddress
    installedExtensions @client {
      id
      extensionId
      address
      details(colonyAddress: $address) {
        deprecated
        initialized
        installedBy
        installedAt
        missingPermissions
        version
      }
    }
  }
}

query ColonyExtension($colonyAddress: String!, $extensionId: String!) {
  colonyExtension(colonyAddress: $colonyAddress, extensionId: $extensionId) @client {
    id
    address
    extensionId
    details(colonyAddress: $colonyAddress) {
      deprecated
      initialized
      installedBy
      installedAt
      missingPermissions
      version
    }
  }
}

query NetworkExtensionVersion($extensionId: String!) {
  networkExtensionVersion(extensionId: $extensionId) @client
}

query WhitelistedUsers($colonyAddress: String!) {
   whitelistedUsers(colonyAddress: $colonyAddress) @client {
    id
    profile {
      walletAddress
    }
   }
}

query TokenBalancesForDomains($colonyAddress: String!, $tokenAddresses: [String!]!, $domainIds: [Int!]) {
  tokens(addresses: $tokenAddresses) @client {
    id
    address
    iconHash
    decimals
    name
    symbol
    balances(colonyAddress: $colonyAddress, domainIds: $domainIds) {
      domainId
      amount
    }
  }
}

query UserColonies($address: String!) {
  user(address: $address) {
    id
    processedColonies @client {
      id
      avatarHash
      avatarURL
      colonyAddress
      colonyName
      displayName
    }
    colonyAddresses
  }
}

query UserColonyAddresses($address: String!) {
  user(address: $address) {
    id
    colonyAddresses
  }
}

query Token($address: String!) {
  token(address: $address) @client {
    id
    address
    iconHash
    decimals
    name
    symbol
  }
}

query TokenInfo($address: String!) {
  tokenInfo(address: $address) {
    decimals
    name
    symbol
    iconHash
  }
}

query UserNotifications($address: String!) {
  user(address: $address) {
    id
    notifications {
      id
      event {
        id
        type
        createdAt
        initiatorAddress
        sourceId
        sourceType
        ...EventContext
      }
      read
    }
  }
}

query SystemInfo {
  systemInfo {
    version
  }
}

query NetworkContracts {
  networkContracts @client {
    version
    feeInverse
  }
}

query ColonyAction($transactionHash: String!, $colonyAddress: String!) {
  colonyAction(transactionHash: $transactionHash, colonyAddress: $colonyAddress) @client {
    hash
    actionInitiator
    fromDomain
    toDomain
    recipient
    status
    events {
      type
      name
      values
      createdAt
      emmitedBy
      transactionHash
    }
    createdAt
    actionType
    amount
    tokenAddress
    annotationHash
    newVersion
    oldVersion
    colonyDisplayName
    colonyAvatarHash
    colonyTokens
    domainName
    domainPurpose
    domainColor
    motionState
    motionDomain
    roles {
      id
      setTo
    }
    blockNumber
    rootHash
  }
}

query TransactionMessages($transactionHash: String!) {
  transactionMessages(transactionHash: $transactionHash) {
    transactionHash
    messages {
    	...TransactionMessage
    }
  }
}

query TransactionMessagesCount($colonyAddress: String!) {
  transactionMessagesCount(colonyAddress: $colonyAddress) {
    colonyTransactionMessages {
      transactionHash
      count
    }
  }
}

query MetaColony {
  processedMetaColony @client {
    id
    colonyAddress
    colonyName
    displayName
    avatarHash
    avatarURL
  }
}

query ActionsThatNeedAttention($colonyAddress: String!, $walletAddress: String!) {
  actionsThatNeedAttention(colonyAddress: $colonyAddress, walletAddress: $walletAddress) @client {
    transactionHash
    needsAction
  }
}

query EventsForMotion($motionId: Int!, $colonyAddress: String!) {
  eventsForMotion(motionId: $motionId, colonyAddress: $colonyAddress) @client {
    type
    name
    values
    createdAt
    emmitedBy
    blockNumber
    transactionHash
  }
}

query RecoveryEventsForSession($blockNumber: Int!, $colonyAddress: String!) {
  recoveryEventsForSession(blockNumber: $blockNumber, colonyAddress: $colonyAddress) @client {
    type
    name
    values
    createdAt
    emmitedBy
    blockNumber
    transactionHash
  }
}

query RecoverySystemMessagesForSession($blockNumber: Int!, $colonyAddress: String!) {
  recoverySystemMessagesForSession(blockNumber: $blockNumber, colonyAddress: $colonyAddress) @client {
    type
    name
    createdAt
  }
}

query GetRecoveryStorageSlot($colonyAddress: String!, $storageSlot: String!) {
  getRecoveryStorageSlot(colonyAddress: $colonyAddress, storageSlot: $storageSlot) @client
}

query RecoveryRolesUsers($colonyAddress: String!, $endBlockNumber: Int) {
  recoveryRolesUsers(colonyAddress: $colonyAddress, endBlockNumber: $endBlockNumber) @client {
    id
    profile {
      avatarHash
      displayName
      username
      walletAddress
    }
  }
}

query RecoveryRolesAndApprovalsForSession($blockNumber: Int!, $colonyAddress: String!) {
  recoveryRolesAndApprovalsForSession(blockNumber: $blockNumber, colonyAddress: $colonyAddress) @client {
    id
    profile {
      avatarHash
      displayName
      username
      walletAddress
    }
    approvedRecoveryExit
  }
}

query GetRecoveryRequiredApprovals($blockNumber: Int!,$colonyAddress: String!) {
  getRecoveryRequiredApprovals(blockNumber: $blockNumber, colonyAddress: $colonyAddress) @client
}

query RecoveryAllEnteredEvents($colonyAddress: String!) {
  recoveryAllEnteredEvents(colonyAddress: $colonyAddress) @client {
    type
    name
    values
    createdAt
    emmitedBy
    blockNumber
    transactionHash
  }
}

query LegacyNumberOfRecoveryRoles($colonyAddress: String!) {
  legacyNumberOfRecoveryRoles(colonyAddress: $colonyAddress) @client
}

# Motions
#
#

query MotionStakes($colonyAddress: String!, $userAddress: String!, $motionId: Int!) {
  motionStakes(colonyAddress: $colonyAddress, userAddress: $userAddress, motionId: $motionId) @client {
    totalNAYStakes
    remainingToFullyYayStaked
    remainingToFullyNayStaked
    maxUserStake
    minUserStake
  }
}

query MotionsSystemMessages($motionId: Int!, $colonyAddress: String!) {
  motionsSystemMessages(motionId: $motionId, colonyAddress: $colonyAddress) @client {
    type
    name
    createdAt
  }
}

query MotionVoterReward($motionId: Int!, $colonyAddress: String!, $userAddress: String!) {
  motionVoterReward(motionId: $motionId, colonyAddress: $colonyAddress, userAddress: $userAddress) @client {
    reward
    minReward
    maxReward
  }
}

query MotionUserVoteRevealed($motionId: Int!, $colonyAddress: String!, $userAddress: String!) {
  motionUserVoteRevealed(motionId: $motionId, colonyAddress: $colonyAddress, userAddress: $userAddress) @client {
    revealed
    vote
  }
}

query MotionVoteResults($motionId: Int!, $colonyAddress: String!, $userAddress: String!) {
  motionVoteResults(motionId: $motionId, colonyAddress: $colonyAddress, userAddress: $userAddress) @client {
    currentUserVoteSide
    yayVotes
    yayVoters
    nayVotes
    nayVoters
  }
}

query VotingState($colonyAddress: String!, $motionId: Int!) {
  votingState(colonyAddress: $colonyAddress, motionId: $motionId, ) @client {
    thresholdValue
    totalVotedReputation
    skillRep
  }
}

query MotionCurrentUserVoted($motionId: Int!, $colonyAddress: String!, $userAddress: String!) {
  motionCurrentUserVoted(motionId: $motionId, colonyAddress: $colonyAddress, userAddress: $userAddress) @client
}

query MotionFinalized($motionId: Int!, $colonyAddress: String!) {
  motionFinalized(motionId: $motionId, colonyAddress: $colonyAddress) @client
}

query MotionStakerReward($motionId: Int!, $colonyAddress: String!, $userAddress: String!) {
  motionStakerReward(motionId: $motionId, colonyAddress: $colonyAddress, userAddress: $userAddress) @client {
    stakingRewardYay
    stakingRewardNay
    stakesYay
    stakesNay
    claimedReward
  }
}

query StakeAmountsForMotion($colonyAddress: String!, $userAddress: String!, $motionId: Int!) {
  stakeAmountsForMotion(colonyAddress: $colonyAddress, userAddress: $userAddress, motionId: $motionId) @client {
    totalStaked {
      YAY
      NAY
    }
    userStake {
      YAY
      NAY
    }
    requiredStake
  }
}

query MotionObjectionAnnotation($motionId: Int!, $colonyAddress: String!) {
  motionObjectionAnnotation(motionId: $motionId, colonyAddress: $colonyAddress) @client {
    address
    metadata
  }
}

query MotionStatus($motionId: Int!, $colonyAddress: String!) {
  motionStatus(motionId: $motionId, colonyAddress: $colonyAddress) @client
}

query MotionTimeoutPeriods($motionId: Int!, $colonyAddress: String!) {
  motionTimeoutPeriods(motionId: $motionId, colonyAddress: $colonyAddress) @client {
    timeLeftToStake
    timeLeftToSubmit
    timeLeftToReveal
    timeLeftToEscalate
  }
}

# The Graph
#
# @NOTE All queries meant for the subgraph should be prepended with `Subgraph`
# otherwise they will be sent to our own graphql server
# Prepending them with `Subgraph` allows the client to decide what endpoint to use

query SubgraphDomains($colonyAddress: String!) {
  domains(where: { colonyAddress: $colonyAddress }) {
    id
    domainChainId
    parent {
      id
      domainChainId
    }
    name
    colonyAddress
    metadata
    metadataHistory {
      id
      metadata
    }
  }
}

query SubgraphDomainMetadata($colonyAddress: String!, $domainId: Int!) {
  domains(where: { colonyAddress: $colonyAddress, domainChainId: $domainId }) {
    id
    domainChainId
    metadata
    metadataHistory {
      id
      metadata
      transaction {
        id
        block {
          timestamp
        }
      }
    }
  }
}

query SubgraphSingleDomain($colonyAddress: String!, $domainId: Int!) {
  domains(where: { colonyAddress: $colonyAddress, domainChainId: $domainId }) {
    id
    domainChainId
    parent {
      id
      domainChainId
    }
    name
    colonyAddress
    metadata
    metadataHistory {
      id
      metadata
    }
  }
}

query ColonyName($address: String!) {
  colonyName(address: $address) @client
}

query ColonyAddress($name: String!) {
  colonyAddress(name: $name) @client
}

query SubgraphColony($address: String!) {
  colony(id: $address) {
    id
    colonyChainId
    ensName
    metadata
    metadataHistory {
      id
      metadata
    }
    token {
      tokenAddress: id
      decimals
      symbol
    }
    extensions {
      address
      hash
    }
  }
}

query SubgraphColonies($colonyAddresses: [String!]!) {
  colonies(
    where: { id_in: $colonyAddresses },
    orderBy: "colonyChainId",
    orderDirection: "asc"
  ) {
    id
    colonyChainId
    ensName
    metadata
    metadataHistory {
      id
      metadata
    }
    token {
      tokenAddress: id
      decimals
      symbol
    }
  }
}

query SubgraphColonyMetadata($address: String!) {
  colony(id: $address) {
    id
    colonyChainId
    metadata
    metadataHistory {
      id
      metadata
      transaction {
        id
        block {
          timestamp
        }
      }
    }
  }
}

query ColonyFromName($name: String!, $address: String!) {
  colonyAddress(name: $name) @client @export(as: "address")
  # NOTE: This calls SubgraphColony internally
  processedColony(address: $address) @client {
    ...FullColony
  }
}

query ColonyDomains($colonyAddress: String!) {
  processedColony(address: $colonyAddress) @client {
    id
    domains @client {
      ...DomainFields
    }
  }
}

query ColonySingleDomain($colonyAddress: String!, $domainId: Int!) {
  colonyDomain(colonyAddress: $colonyAddress, domainId: $domainId) @client {
    ...DomainFields
  }
}

query ProcessedColony($address: String!) {
  # NOTE: This calls SubgraphColony internally
  processedColony(address: $address) @client {
    ...FullColony
  }
}

query ColonyNativeToken($address: String!) {
  processedColony(address: $address) @client {
    id
    nativeTokenAddress
  }
}

query ColonyTransfers($address: String!) {
  processedColony(address: $address) @client {
    id
    colonyAddress
    transfers @client {
      amount
      hash
      colonyAddress
      date
      from
      hash
      incoming
      to
      token
    }
    unclaimedTransfers @client {
      amount
      hash
      colonyAddress
      date
      from
      hash
      incoming
      to
      token
    }
  }
}

query ColonyProfile($address: String!) {
  processedColony(address: $address) @client {
    ...ColonyProfile
  }
}

query ColonySubscribedUsers($colonyAddress: String!) {
  subscribedUsers(colonyAddress: $colonyAddress) {
    id
    profile {
      avatarHash
      displayName
      username
      walletAddress
    }
  }
}

query ColonyMembersWithReputation($colonyAddress: String!, $domainId: Int) {
  colonyMembersWithReputation(colonyAddress: $colonyAddress, domainId: $domainId) @client
}

query ColonyReputation($address: String!, $domainId: Int) {
  colonyReputation(address: $address, domainId: $domainId) @client
}

query ColonyHistoricRoles($colonyAddress: String!, $blockNumber: Int!) {
  historicColonyRoles(colonyAddress: $colonyAddress, blockNumber: $blockNumber) @client {
    address
    domains {
      domainId
      roles
    }
  }
}

query WhitelistAgreement($colonyAddress: String!) {
  whitelistAgreement(colonyAddress: $colonyAddress) @client
}
