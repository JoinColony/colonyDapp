
#
# @TODO Split file into own /queries/*.graphql file based on purpouse
#

query LoggedInUser {
  loggedInUser @client {
    walletAddress
    balance
    username
    ethereal
    networkId
  }
}

query User($address: String!) {
  user(address: $address) {
    id
    profile {
      username
      walletAddress
      displayName
      bio
      location
      website
      avatarHash
    }
  }
}

# This isn't currently being used anywhere, but... here it is anyways.
# In most cases, we'll want to fetch the reputation *after* the user is already fetched,
# as fetching reputation takes quite a bit longer.
query UserWithReputation($address: String!, $colonyAddress: String!, $domainId: Int) {
  user(address: $address) {
    id
    profile {
      username
      walletAddress
      displayName
      bio
      location
      website
      avatarHash
    }
    reputation(colonyAddress: $colonyAddress, domainId: $domainId) @client
  }
}

query UserReputation($address: String!, $colonyAddress: String!, $domainId: Int, $rootHash: String) {
  userReputation(address: $address, colonyAddress: $colonyAddress, domainId: $domainId, rootHash: $rootHash) @client
}

query UserReputationForTopDomains($address: String!, $colonyAddress: String!) {
  userReputationForTopDomains(address: $address, colonyAddress: $colonyAddress) @client {
    domainId
    reputationPercentage
  }
}

query UserTokens($address: String!) {
  user(address: $address) {
    id
    tokenAddresses
    tokens(walletAddress: $address) @client {
      id
      address
      iconHash
      decimals
      name
      symbol
      balance
    }
  }
}

query UserBalanceWithLock($address: String!, $tokenAddress: String!, $colonyAddress: String!) {
  user(address: $address) {
    id
    userLock(walletAddress: $address, tokenAddress: $tokenAddress, colonyAddress: $colonyAddress) @client {
      balance
      nativeToken {
        decimals
        name
        symbol
        balance
        address
        verified
      }
      totalObligation
      pendingBalance
      activeTokens
    }
  }
}

query Username($address: String!) {
  username(address: $address) @client
}

query UserAddress($name: String!) {
  userAddress(name: $name) @client
}

query TokenBalancesForDomains($colonyAddress: String!, $tokenAddresses: [String!]!, $domainIds: [Int!]) {
  tokens(addresses: $tokenAddresses) @client {
    id
    address
    iconHash
    decimals
    name
    symbol
    balances(colonyAddress: $colonyAddress, domainIds: $domainIds) {
      domainId
      amount
    }
  }
}

query DomainBalance($colonyAddress: String!, $tokenAddress: String!, $domainId: Int!) {
  domainBalance(colonyAddress: $colonyAddress, tokenAddress: $tokenAddress, domainId: $domainId) @client
}

query UserColonies($address: String!) {
  user(address: $address) {
    id
    processedColonies @client {
      id
      avatarHash
      avatarURL
      colonyAddress
      colonyName
      displayName
    }
    colonyAddresses
  }
}

query UserColonyAddresses($address: String!) {
  user(address: $address) {
    id
    colonyAddresses
  }
}

query Token($address: String!) {
  token(address: $address) @client {
    id
    address
    iconHash
    decimals
    name
    symbol
  }
}

query TokenInfo($address: String!) {
  tokenInfo(address: $address) {
    decimals
    name
    symbol
    iconHash
    address
  }
}

query UserNotifications($address: String!) {
  user(address: $address) {
    id
    notifications {
      id
      event {
        id
        type
        createdAt
        initiatorAddress
        sourceId
        sourceType
        ...EventContext
      }
      read
    }
  }
}

query SystemInfo {
  systemInfo {
    version
  }
}

query NetworkContracts {
  networkContracts @client {
    version
    feeInverse
  }
}

query MotionsTxHashes($motionIds: [String!]!, $colonyAddress: String!) {
  motionsTxHashes(motionIds: $motionIds, colonyAddress: $colonyAddress) @client
}


query ColonyAction($transactionHash: String!, $colonyAddress: String!) {
  colonyAction(transactionHash: $transactionHash, colonyAddress: $colonyAddress) @client {
    hash
    actionInitiator
    fromDomain
    toDomain
    recipient
    status
    events {
      type
      name
      values
      createdAt
      emmitedBy
      transactionHash
    }
    createdAt
    actionType
    amount
    tokenAddress
    annotationHash
    annotationMessage
    newVersion
    oldVersion
    colonyDisplayName
    colonyAvatarHash
    colonyTokens
    domainName
    domainPurpose
    domainColor
    motionState
    motionDomain
    roles {
      id
      setTo
    }
    blockNumber
    rootHash
    reputationChange
    isWhitelistActivated
    verifiedAddresses
    colonySafes {
      safeName
      contractAddress
      chainId
      moduleContractAddress
    }
    safeData
    safeTransactions
    transactionsTitle
    safeTransactionStatuses
  }
}

query MetaColony {
  processedMetaColony @client {
    id
    colonyAddress
    colonyName
    displayName
    avatarHash
    avatarURL
  }
}

query ActionsThatNeedAttention($colonyAddress: String!, $walletAddress: String!) {
  actionsThatNeedAttention(colonyAddress: $colonyAddress, walletAddress: $walletAddress) @client {
    transactionHash
    needsAction
  }
}

# The Graph
#
# @NOTE All queries meant for the subgraph should be prepended with `Subgraph`
# otherwise they will be sent to our own graphql server
# Prepending them with `Subgraph` allows the client to decide what endpoint to use

query SubgraphDomains($colonyAddress: String!) {
  domains(where: { colonyAddress: $colonyAddress }) {
    id
    domainChainId
    parent {
      id
      domainChainId
    }
    name
    colonyAddress
    metadata
    metadataHistory {
      id
      metadata
    }
  }
}

query SubgraphDomainMetadata($colonyAddress: String!, $domainId: Int!) {
  domains(where: { colonyAddress: $colonyAddress, domainChainId: $domainId }) {
    id
    domainChainId
    metadata
    metadataHistory {
      id
      metadata
      transaction {
        id
        block {
          timestamp
        }
      }
    }
  }
}

query SubgraphSingleDomain($colonyAddress: String!, $domainId: Int!) {
  domains(where: { colonyAddress: $colonyAddress, domainChainId: $domainId }) {
    id
    domainChainId
    parent {
      id
      domainChainId
    }
    name
    colonyAddress
    metadata
    metadataHistory {
      id
      metadata
    }
  }
}

query ColonyName($address: String!) {
  colonyName(address: $address) @client
}

query ColonyAddress($name: String!) {
  colonyAddress(name: $name) @client
}

query SubgraphColony($address: String!) {
  colony(id: $address) {
    id
    colonyChainId
    ensName
    metadata
    metadataHistory {
      id
      metadata
      transaction {
        id
        transactionHash: id
        block {
          id
          number: id
          timestamp
        }
      }
    }
    token {
      tokenAddress: id
      decimals
      symbol
    }
    extensions {
      address: id
      hash
    }
  }
}

query SubgraphColonies($colonyAddresses: [String!]!) {
  colonies(
    where: { id_in: $colonyAddresses },
    orderBy: "colonyChainId",
    orderDirection: "asc"
  ) {
    id
    colonyChainId
    ensName
    metadata
    metadataHistory {
      id
      metadata
      transaction {
        block {
          timestamp
        }
      }
    }
    token {
      tokenAddress: id
      decimals
      symbol
    }
  }
}

query SubgraphColonyMetadata($address: String!) {
  colony(id: $address) {
    id
    colonyChainId
    metadata
    metadataHistory {
      id
      metadata
      transaction {
        id
        block {
          timestamp
        }
      }
    }
  }
}

query ColonyFromName($name: String!, $address: String!) {
  colonyAddress(name: $name) @client @export(as: "address")
  # NOTE: This calls SubgraphColony internally
  processedColony(address: $address) @client {
    ...FullColony
  }
}

query ColonyDomains($colonyAddress: String!) {
  processedColony(address: $colonyAddress) @client {
    id
    domains @client {
      ...DomainFields
    }
  }
}

query ColonySingleDomain($colonyAddress: String!, $domainId: Int!) {
  colonyDomain(colonyAddress: $colonyAddress, domainId: $domainId) @client {
    ...DomainFields
  }
}

query ProcessedColony($address: String!) {
  # NOTE: This calls SubgraphColony internally
  processedColony(address: $address) @client {
    ...FullColony
  }
}

query ColonyNativeToken($address: String!) {
  processedColony(address: $address) @client {
    id
    nativeTokenAddress
  }
}

query ColonyTransfers($address: String!) {
  processedColony(address: $address) @client {
    id
    colonyAddress
    transfers @client {
      amount
      hash
      colonyAddress
      date
      from
      hash
      incoming
      to
      token
    }
    unclaimedTransfers @client {
      amount
      hash
      colonyAddress
      date
      from
      hash
      incoming
      to
      token
    }
  }
}

query ColonyProfile($address: String!) {
  processedColony(address: $address) @client {
    ...ColonyProfile
  }
}

query ColonyMembersWithReputation($colonyAddress: String!, $domainId: Int) {
  colonyMembersWithReputation(colonyAddress: $colonyAddress, domainId: $domainId) @client
}

query ContributorsAndWatchers($colonyAddress: String!, $colonyName: String!, $domainId: Int) {
  contributorsAndWatchers(colonyAddress: $colonyAddress, colonyName: $colonyName, domainId: $domainId) @client {
    contributors {
      id
      directRoles
      roles
      banned
      isWhitelisted
      profile {
        avatarHash
        displayName
        username
        walletAddress
      }
      userReputation
    }
    watchers {
      id
      banned
      isWhitelisted
      profile {
        avatarHash
        displayName
        username
        walletAddress
      }
    }
  }
}

query ColonyReputation($address: String!, $domainId: Int) {
  colonyReputation(address: $address, domainId: $domainId) @client
}

query ColonyHistoricRoles($colonyAddress: String!, $blockNumber: Int!) {
  historicColonyRoles(colonyAddress: $colonyAddress, blockNumber: $blockNumber) @client {
    address
    domains {
      domainId
      roles
    }
  }
}

query VerifiedUsers($verifiedAddresses: [String!]!) {
  verifiedUsers(verifiedAddresses: $verifiedAddresses) @client
}
