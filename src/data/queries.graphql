#import './fragments.graphql'

query Task($id: String!) {
  task(id: $id) {
    id
    assignedWorker {
      id
      profile {
        avatarHash
        displayName
        username
        walletAddress
      }
    }
    assignedWorkerAddress
    cancelledAt
    colony {
      id
      colonyAddress
      colonyName
      avatarHash
      displayName
    }
    colonyAddress
    createdAt
    creator {
      id
      profile {
        avatarHash
        displayName
        username
        walletAddress
      }
    }
    creatorAddress
    description
    dueDate
    ethDomainId
    ethSkillId
    ethTaskId
    finalizedAt
    # fixme return payouts as well
    title
    workInvites {
      id
      profile {
        avatarHash
        displayName
        username
        walletAddress
      }
    }
    workInviteAddresses
    workRequests {
      id
      profile {
        avatarHash
        displayName
        username
        walletAddress
      }
    }
    workRequestAddresses
  }
}

query TaskFeedEvents($id: String!) {
  task(id: $id) {
    id
    events {
      ...TaskEvent
    }
  }
}

query LoggedInUser {
  loggedInUser @client {
    walletAddress
    balance
    username
  }
}

query User($address: String!) {
  user(address: $address) {
    id
    profile {
      username
      walletAddress
      displayName
      bio
      location
      website
      avatarHash
    }
  }
}

query UserTasks($address: String!) {
  user(address: $address) {
    id
    tasks {
      id
      assignedWorker {
        id
        profile {
          avatarHash
        }
      }
      assignedWorkerAddress
      cancelledAt
      colony {
        id
        colonyName
      }
      colonyAddress
      createdAt
      creatorAddress
      dueDate
      ethDomainId
      ethSkillId
      finalizedAt
      title
      workRequestAddresses
    }
  }
}

query UserTokens($address: String!) {
  user(address: $address) {
    id
    tokens
  }
}

fragment FullColony on Colony {
  id
  colonyAddress
  colonyName
  avatarHash
  description
  displayName
  guideline
  website
  tokens {
    address
    name
    symbol
    iconHash
    isExternal
    isNative
    balances(address: $address) @client {
      domainId
      balance
    }
  }
  version(address: $address) @client
  canMintNativeToken(address: $address) @client
  canUnlockNativeToken(address: $address) @client
  isInRecoveryMode(address: $address) @client
  isNativeTokenLocked(address: $address) @client
}

query ColonyFromName($name: String!, $address: String!) {
  colonyAddress(name: $name) @client @export(as: "address")
  colony(address: $address) {
    ...FullColony
  }
}

query Colony($address: String!) {
  colony(address: $address) {
    ...FullColony
  }
}

# @TODO we want to get the full tasks in a lot of cases, maybe this isn't needed
query UserColonyIds($address: String!) {
  user(address: $address) {
    id
    colonies {
      id
    }
  }
}

query ColonyTasks($address: String!) {
  colony(address: $address) {
    id
    tasks {
      id
      assignedWorker {
        id
        profile {
          avatarHash
        }
      }
      assignedWorkerAddress
      cancelledAt
      colony {
        id
        colonyName
      }
      colonyAddress
      createdAt
      creatorAddress
      dueDate
      ethDomainId
      ethSkillId
      finalizedAt
      title
      workRequestAddresses
    }
  }
}

query ColonySubscribedUsers($colonyAddress: String!) {
  colony(address: $colonyAddress) {
    id
    subscribedUsers {
      id
      profile {
        avatarHash
        displayName
        username
        walletAddress
      }
    }
  }
}

query Domain($colonyAddress: String!, $ethDomainId: Int!) {
  domain(colonyAddress: $colonyAddress, ethDomainId: $ethDomainId) {
    id
    ethDomainId
    name
    parent {
      ethDomainId
    }
  }
}

query ColonyDomains($colonyAddress: String!) {
  colony(address: $colonyAddress) {
    id
    domains {
      id
      ethDomainId
      name
      parent {
        id
      }
    }
  }
}
