fragment Payouts on Task {
  payouts {
    amount
    tokenAddress
    token @client {
      id
      address
      decimals
      name
      symbol
    }
  }
}

fragment PersistentTaskPayouts on PersistentTask {
  payouts {
    amount
    tokenAddress
    token @client {
      id
      address
      decimals
      name
      symbol
    }
  }
}

fragment CreateTaskFields on Task {
  id
  ...Payouts
  assignedWorker {
    id
    profile {
      avatarHash
    }
  }
  assignedWorkerAddress
  cancelledAt
  colony {
    id
    colonyName
    displayName
    nativeTokenAddress
  }
  colonyAddress
  createdAt
  creatorAddress
  dueDate
  ethDomainId
  ethSkillId
  finalizedAt
  title
  workRequestAddresses
}

fragment Tokens on Colony {
  nativeTokenAddress
  tokenAddresses
  tokens @client {
    id
    address
    iconHash
    decimals
    name
    symbol
    balances(colonyAddress: $address) {
      domainId
      amount
    }
  }
}

fragment ColonyProfile on Colony {
  id
  colonyAddress
  colonyName
  avatarHash
  description
  displayName
  guideline
  website
}

fragment FullColony on Colony {
  ...ColonyProfile
  ...Tokens
  isNativeTokenExternal
  version @client
  canMintNativeToken @client
  canUnlockNativeToken @client
  isInRecoveryMode @client
  isNativeTokenLocked @client
}

fragment SuggestionFields on Suggestion {
  id
  createdAt
  colonyAddress
  creatorAddress
  creator {
    id
    profile {
      displayName
      username
      walletAddress
    }
  }
  ethDomainId
  status
  title
  taskId
  upvotes
}

fragment ProgramFields on Program {
  id
  createdAt
  creatorAddress
  colonyAddress
  description
  enrolled
  enrolledUserAddresses
  levels {
    id
    achievement
    programId
    stepIds
    status
    title
  }
  levelIds
  status
  title
}

fragment LevelFields on Level {
  id
  achievement
  createdAt
  creatorAddress
  description
  numRequiredSteps
  programId
  status
  stepIds
  title
}

fragment SubmissionFields on Submission {
  id
  createdAt
  creatorAddress
  persistentTaskId
  status
  statusChangedAt
  submission
}

fragment PersistentTaskFields on PersistentTask {
  id
  colonyAddress
  createdAt
  creatorAddress
  description
  ethDomainId
  ethSkillId
  ...PersistentTaskPayouts
  status
  submissions {
    ...SubmissionFields
  }
  title
}

fragment EventFields on Event {
  createdAt
  initiator {
    id
    profile {
      avatarHash
      displayName
      username
      walletAddress
    }
  }
  initiatorAddress
  sourceId
  sourceType
  type
}

fragment EventContext on Event {
    context {
    ... on AssignWorkerEvent {
      taskId
      type
      workerAddress
      colonyAddress
    }
    ... on CancelTaskEvent {
      taskId
      type
      colonyAddress
    }
    ... on CreateTaskEvent {
      colonyAddress
      ethDomainId
      taskId
      type
    }
    ... on CreateWorkRequestEvent {
      taskId
      type
      colonyAddress
    }
    ... on FinalizeTaskEvent {
      taskId
      type
      colonyAddress
    }
    ... on RemoveTaskPayoutEvent {
      amount
      taskId
      tokenAddress
      type
      colonyAddress
    }
    ... on SendWorkInviteEvent {
      taskId
      type
      workerAddress
      colonyAddress
    }
    ... on SetTaskDescriptionEvent {
      description
      taskId
      type
      colonyAddress
    }
    ... on SetTaskDomainEvent {
      ethDomainId
      taskId
      type
      colonyAddress
    }
    ... on SetTaskDueDateEvent {
      dueDate
      taskId
      type
      colonyAddress
    }
    ... on SetTaskPayoutEvent {
      amount
      taskId
      tokenAddress
      type
      colonyAddress
    }
    ... on SetTaskSkillEvent {
      ethSkillId
      taskId
      type
      colonyAddress
    }
    ... on RemoveTaskSkillEvent {
      ethSkillId
      taskId
      type
      colonyAddress
    }
    ... on SetTaskTitleEvent {
      taskId
      title
      type
      colonyAddress
    }
    ... on TaskMessageEvent {
      colonyAddress
      message
      taskId
      type
      colonyAddress
    }
    ... on UnassignWorkerEvent {
      taskId
      type
      workerAddress
      colonyAddress
    }
    ... on CreateDomainEvent {
      type
      ethDomainId
      colonyAddress
    }
  }
}

fragment TaskEvent on Event {
  ...EventFields
  ...EventContext
}
