/* @flow */

export const VERSION = Number(process.env.VERSION) || 1;

export const TASK_STATUS = Object.freeze({
  CANCELLED: 'CANCELLED',
  CLOSED: 'CLOSED',
  FINALIZED: 'FINALIZED',
});

export const TASK_EVENT_TYPES = Object.freeze({
  COMMENT_POSTED: 'COMMENT_POSTED',
  COMMENT_STORE_CREATED: 'COMMENT_STORE_CREATED',
  DOMAIN_SET: 'DOMAIN_SET',
  DUE_DATE_SET: 'DUE_DATE_SET',
  PAYOUT_SET: 'PAYOUT_SET',
  SKILL_SET: 'SKILL_SET',
  TASK_CANCELLED: 'TASK_CANCELLED',
  TASK_CLOSED: 'TASK_CLOSED',
  TASK_CREATED: 'TASK_CREATED',
  TASK_DESCRIPTION_SET: 'TASK_DESCRIPTION_SET',
  TASK_FINALIZED: 'TASK_FINALIZED',
  TASK_TITLE_SET: 'TASK_TITLE_SET',
  WORK_INVITE_SENT: 'WORK_INVITE_SENT',
  WORK_REQUEST_CREATED: 'WORK_REQUEST_CREATED',
  WORKER_ASSIGNED: 'WORKER_ASSIGNED',
  WORKER_UNASSIGNED: 'WORKER_UNASSIGNED',
});

// TODO: Add inbox event types
export const USER_EVENT_TYPES = Object.freeze({
  READ_UNTIL: 'READ_UNTIL',
  SUBSCRIBED_TO_COLONY: 'SUBSCRIBED_TO_COLONY',
  SUBSCRIBED_TO_TASK: 'SUBSCRIBED_TO_TASK',
  UNSUBSCRIBED_FROM_COLONY: 'UNSUBSCRIBED_FROM_COLONY',
  UNSUBSCRIBED_FROM_TASK: 'UNSUBSCRIBED_FROM_TASK',
});

export const COLONY_EVENT_TYPES = Object.freeze({
  AVATAR_REMOVED: 'AVATAR_REMOVED',
  AVATAR_UPLOADED: 'AVATAR_UPLOADED',
  DOMAIN_CREATED: 'DOMAIN_CREATED',
  PROFILE_CREATED: 'PROFILE_CREATED',
  PROFILE_UPDATED: 'PROFILE_UPDATED',
  TASK_STORE_REGISTERED: 'TASK_STORE_REGISTERED',
  TASK_STORE_UNREGISTERED: 'TASK_STORE_UNREGISTERED',
  TOKEN_INFO_ADDED: 'TOKEN_INFO_ADDED',
});
