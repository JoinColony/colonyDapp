@value arrowSize: 8px;
@value arrowBorder: 1px;
@value backgroundColor: rgb(251, 251, 251); /* --colony-white */
@value themeDarkBackgroundColor: rgb(58, 58, 58); /* --grey-1 */
@value themeGreyBackgroundColor: var(--grey-blue-2);

.main {
  z-index: calc(var(--z-index-notification) + 1);
  border-radius: var(--radius-small);
  background-color: backgroundColor;
  color: var(--grey-4);
  box-shadow: 0 0 20px -2px var(--temp-grey-blue-4);
}

.arrow {
  height: 0;
  width: 0;
  position: absolute;
  top: 0;
  left: 0;
  border: calc(arrowSize + arrowBorder) solid transparent;
  pointer-events: none;
}

.arrow::before {
  height: 0;
  width: 0;
  position: absolute;
  border: arrowSize solid transparent;
  content: '';
}

.placementTop {
  top: calc(0px - arrowSize) !important;
}

.placementRight {
  left: calc(arrowSize + arrowBorder * 2) !important;
}

.placementBottom {
  top: arrowSize !important;
}

.placementLeft {
  left: calc(0px - arrowSize - arrowBorder * 2) !important;
}

/*
 * @NOTE On arrow positioning classes
 *
 * The arrow classes need to be distinct from the wrapping popover (and can't inherit
 * styles this way), otherwise Popover nested inside popovers won't work.
 *
 * Because of this the placement location needs to be encoded in the class's name.
 */

.topArrow {
  composes: arrow;
  top: auto;
  bottom: calc((-2 * arrowSize) - arrowBorder);
  border-top-color: backgroundColor;
}

.topArrow::before {
  bottom: calc(-1 * (arrowSize - arrowBorder));
  left: calc(-1 * arrowSize);
}

.rightArrow {
  composes: arrow;
  left: calc(-2 * (arrowSize + arrowBorder));
  border-right-color: backgroundColor;
}

.rightArrow::before {
  top: calc(-1 * arrowSize);
  left: calc(-1 * (arrowSize - arrowBorder));
}

.bottomArrow {
  composes: arrow;
  top: calc(-2 * (arrowSize + arrowBorder));
  border-bottom-color: backgroundColor;
}

.bottomArrow::before {
  top: calc(-1 * (arrowSize - arrowBorder));
  left: calc(-1 * arrowSize);
}

.leftArrow {
  composes: arrow;
  right: calc(-2 * (arrowSize + arrowBorder));
  left: auto;
  border-left-color: backgroundColor;
}

.leftArrow::before {
  top: calc(-1 * arrowSize);
  right: calc(-1 * (arrowSize - arrowBorder));
}

.themeDark {
  composes: main;
  background-color: themeDarkBackgroundColor;
  color: var(--colony-white);
}

/*
 *  @NOTE On theme-ing arrows
 *
 *  The arrow classes need to be distinct from the wrapping popover (and can't inherit
 * styles this way), otherwise Popover nested inside popovers won't work.
 *
 * Because of this the theme name needs to be encoded in the class's name.
 */

.themeDarkTopArrow { border-top-color: transparent; }
.themeDarkTopArrow::before { border-top-color: themeDarkBackgroundColor; }

.themeDarkRightArrow { border-right-color: transparent; }
.themeDarkRightArrow::before { border-right-color: themeDarkBackgroundColor; }

.themeDarkBottomArrow { border-bottom-color: transparent; }
.themeDarkBottomArrow::before { border-bottom-color: themeDarkBackgroundColor; }

.themeDarkLeftArrow { border-left-color: transparent; }
.themeDarkLeftArrow::before { border-left-color: themeDarkBackgroundColor; }

.themeGrey {
  composes: main;
  background-color: themeGreyBackgroundColor;
  box-shadow: 0 0 20px -2px var(--grey-5);
}

.themeGreyTopArrow { border-top-color: transparent; }
.themeGreyTopArrow::before { border-top-color: themeGreyBackgroundColor; }

.themeGreyRightArrow { border-right-color: transparent; }
.themeGreyRightArrow::before { border-right-color: themeGreyBackgroundColor; }

.themeGreyBottomArrow { border-bottom-color: transparent; }
.themeGreyBottomArrow::before { border-bottom-color: themeGreyBackgroundColor; }

.themeGreyLeftArrow { border-left-color: transparent; }
.themeGreyLeftArrow::before { border-left-color: themeGreyBackgroundColor; }

/* State */

.stateHideArrow .arrow {
  display: none;
}

.stateShowArrow .arrow {
  display: block;
}
