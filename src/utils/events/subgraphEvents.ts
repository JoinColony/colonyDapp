import { LogDescription, id as topicId } from 'ethers/utils';
import { SubgraphEvent, SubgraphTransaction, SubgraphBlock } from '~data/index';

/*
 * Needed to omit the unused `decode()` function as well as add
 * information related to the transaction and block
 */
export type ExtendedLogDescription = Omit<LogDescription, 'decode'> & {
  timestamp: number;
  block: number;
  hash: string;
};

/*
 * Needed since the types auto generated by graphql don't account for prop
 * renaming in the queries, so they still expect there old names
 */
export type NormalizedSubgraphEvent = SubgraphEvent & {
  transaction: SubgraphTransaction & {
    transactionHash: string;
    block: SubgraphBlock & {
      number: string;
    };
  };
};

/*
 * Utility to parse events that come from the subgraph handler
 * into events that resemble the Log format that we get directly from the chain
 */
export const parseSubgraphEvent = ({
  name,
  args,
  transaction: {
    transactionHash,
    block: { number: blockId, timestamp: blockTimestamp },
  },
}: NormalizedSubgraphEvent): ExtendedLogDescription => ({
  name: name.substring(0, name.indexOf('(')),
  signature: name,
  topic: topicId(name),
  values: { ...JSON.parse(args) },
  block: parseInt(blockId.replace('block_', ''), 10),
  timestamp: parseInt(blockTimestamp, 10) * 1000,
  hash: transactionHash,
});
