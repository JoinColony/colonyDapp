// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`FileUpload component Renders initial component 1`] = `
<Formik
  initialValues={Object {}}
  onSubmit={[Function]}
>
  <ForwardRef
    help="Some help text"
    label="Basic file upload"
    maxFilesLimit={3}
    name="fileUpload"
    upload={[Function]}
  >
    <Component
      forwardedRef={null}
      help="Some help text"
      label="Basic file upload"
      maxFilesLimit={3}
      name="fileUpload"
      upload={[Function]}
    >
      <FormikConnect(FieldArrayInner)
        name="fileUpload"
        render={[Function]}
      >
        <FieldArrayInner
          formik={
            Object {
              "dirty": false,
              "errors": Object {},
              "getFieldHelpers": [Function],
              "getFieldMeta": [Function],
              "getFieldProps": [Function],
              "handleBlur": [Function],
              "handleChange": [Function],
              "handleReset": [Function],
              "handleSubmit": [Function],
              "initialErrors": Object {},
              "initialStatus": undefined,
              "initialTouched": Object {},
              "initialValues": Object {},
              "isSubmitting": false,
              "isValid": true,
              "isValidating": false,
              "registerField": [Function],
              "resetForm": [Function],
              "setErrors": [Function],
              "setFieldError": [Function],
              "setFieldTouched": [Function],
              "setFieldValue": [Function],
              "setFormikState": [Function],
              "setStatus": [Function],
              "setSubmitting": [Function],
              "setTouched": [Function],
              "setValues": [Function],
              "status": undefined,
              "submitCount": 0,
              "submitForm": [Function],
              "touched": Object {},
              "unregisterField": [Function],
              "validateField": [Function],
              "validateForm": [Function],
              "validateOnBlur": true,
              "validateOnChange": true,
              "validateOnMount": false,
              "values": Object {},
            }
          }
          name="fileUpload"
          render={[Function]}
          validateOnChange={true}
        >
          <FileUpload
            form={
              Object {
                "dirty": false,
                "errors": Object {},
                "getFieldHelpers": [Function],
                "getFieldMeta": [Function],
                "getFieldProps": [Function],
                "handleBlur": [Function],
                "handleChange": [Function],
                "handleReset": [Function],
                "handleSubmit": [Function],
                "initialErrors": Object {},
                "initialStatus": undefined,
                "initialTouched": Object {},
                "initialValues": Object {},
                "isSubmitting": false,
                "isValid": true,
                "isValidating": false,
                "registerField": [Function],
                "resetForm": [Function],
                "setErrors": [Function],
                "setFieldError": [Function],
                "setFieldTouched": [Function],
                "setFieldValue": [Function],
                "setFormikState": [Function],
                "setStatus": [Function],
                "setSubmitting": [Function],
                "setTouched": [Function],
                "setValues": [Function],
                "status": undefined,
                "submitCount": 0,
                "submitForm": [Function],
                "touched": Object {},
                "unregisterField": [Function],
                "validateField": [Function],
                "validateForm": [Function],
                "validateOnBlur": true,
                "validateOnChange": true,
                "validateOnMount": false,
                "values": Object {},
              }
            }
            forwardedRef={null}
            handleInsert={[Function]}
            handleMove={[Function]}
            handlePop={[Function]}
            handlePush={[Function]}
            handleRemove={[Function]}
            handleReplace={[Function]}
            handleSwap={[Function]}
            handleUnshift={[Function]}
            help="Some help text"
            insert={[Function]}
            label="Basic file upload"
            maxFilesLimit={3}
            move={[Function]}
            name="fileUpload"
            pop={[Function]}
            push={[Function]}
            remove={[Function]}
            replace={[Function]}
            swap={[Function]}
            unshift={[Function]}
            upload={[Function]}
          >
            <div>
              <InputLabel
                help="Some help text"
                label="Basic file upload"
              >
                <label
                  className=""
                >
                  <div>
                    <span>
                      Basic file upload
                    </span>
                    <span>
                      Some help text
                    </span>
                  </div>
                </label>
              </InputLabel>
              <div
                className=""
                onBlur={[Function]}
                onClick={[Function]}
                onDragEnter={[Function]}
                onDragLeave={[Function]}
                onDragOver={[Function]}
                onDrop={[Function]}
                onFocus={[Function]}
                onKeyDown={[Function]}
                tabIndex={0}
              >
                <input
                  accept={
                    Array [
                      "image/svg+xml",
                      "image/png",
                      "image/jpeg",
                    ]
                  }
                  autoComplete="off"
                  multiple={true}
                  onChange={[Function]}
                  onClick={[Function]}
                  style={
                    Object {
                      "display": "none",
                    }
                  }
                  tabIndex={-1}
                  type="file"
                />
                <FileUpload.DefaultPlaceholder>
                  <div>
                    <FormattedMessage
                      defaultMessage="Drag or {browse}"
                      id="FileUpload.DefaultPlaceholder.dropzoneText"
                      values={
                        Object {
                          "browse": <span>
                            <FormattedMessage
                              defaultMessage="browse"
                              id="FileUpload.DefaultPlaceholder.dropzoneTextBrowseAction"
                              values={Object {}}
                            />
                          </span>,
                        }
                      }
                    >
                      Drag or 
                      <span>
                        <FormattedMessage
                          defaultMessage="browse"
                          id="FileUpload.DefaultPlaceholder.dropzoneTextBrowseAction"
                          values={Object {}}
                        >
                          browse
                        </FormattedMessage>
                      </span>
                    </FormattedMessage>
                  </div>
                </FileUpload.DefaultPlaceholder>
              </div>
              <InputStatus
                error=""
              >
                <p
                  className=""
                />
              </InputStatus>
            </div>
          </FileUpload>
        </FieldArrayInner>
      </FormikConnect(FieldArrayInner)>
    </Component>
  </ForwardRef>
</Formik>
`;
