diff --git a/API.md b/API.md
index 11eec64..775842f 100644
--- a/API.md
+++ b/API.md
@@ -63,6 +63,7 @@ Read the **[GETTING STARTED](https://github.com/orbitdb/orbit-db/blob/master/GUI
   * [`ready`](#ready)
   * [`write`](#write)
   * [`closed`](#closed)
+  * [`peer.exchanged`](#peerexchanged)
 
 <!-- tocstop -->
 
@@ -610,3 +611,10 @@ Emitted once the database has finished closing.
 ```javascript
 db.events.on('closed', (dbname) => ... )
 ```
+
+### `peer.exchanged`
+```javascript
+db.events.on('peer.exchanged', (peer, address, heads) => ... )
+```
+
+Emitted after heads have been exchanged with a peer for a specific database. This will be emitted after every exchange, even if no heads are received from the peer, or if all received heads are already present. (This is in contrast with the `replicated` event, which will only fire when new heads have been received.) Note that `heads` here contains heads *received* as part of the exchange, not heads sent.
diff --git a/src/OrbitDB.js b/src/OrbitDB.js
index 90a78bf..6f7c02f 100644
--- a/src/OrbitDB.js
+++ b/src/OrbitDB.js
@@ -192,12 +192,15 @@ let databaseTypes = {
   }
 
   // Callback for receiving a message from the network
-  async _onMessage (address, heads) {
+  async _onMessage (address, heads, peer) {
     const store = this.stores[address]
     try {
       logger.debug(`Received ${heads.length} heads for '${address}':\n`, JSON.stringify(heads.map(e => e.hash), null, 2))
-      if (store && heads && heads.length > 0) {
-        await store.sync(heads)
+      if (store && heads) {
+        if (heads.length > 0) {
+          await store.sync(heads)
+        }
+        store.events.emit('peer.exchanged', peer, address, heads)
       }
     } catch (e) {
       logger.error(e)
@@ -211,7 +214,7 @@ let databaseTypes = {
     const getStore = address => this.stores[address]
     const getDirectConnection = peer => this._directConnections[peer]
     const onChannelCreated = channel => this._directConnections[channel._receiverID] = channel
-    const onMessage = (address, heads) => this._onMessage(address, heads)
+    const onMessage = (address, heads) => this._onMessage(address, heads, peer)
 
     const channel = await exchangeHeads(
       this._ipfs,
diff --git a/test/replicate.test.js b/test/replicate.test.js
index dc138d2..1cca6e4 100644
--- a/test/replicate.test.js
+++ b/test/replicate.test.js
@@ -152,9 +152,10 @@ Object.keys(testAPIs).forEach(API => {
       await waitForPeers(ipfs2, [orbitdb1.id], db1.address.toString())
 
       let finished = false
-      let eventCount = { 'replicate': 0, 'replicate.progress': 0, 'replicated': 0 }
+      let eventCount = { 'replicate': 0, 'replicate.progress': 0, 'replicated': 0, 'peer.exchanged': 0 }
       let events = []
       let expectedEventCount = 99
+      let expectedPeerExchangeCount = 99
 
       db2.events.on('replicate', (address, entry) => {
         eventCount['replicate'] ++
@@ -178,6 +179,15 @@ Object.keys(testAPIs).forEach(API => {
         })
       })
 
+      db2.events.on('peer.exchanged', (address, entry) => {
+        eventCount['peer.exchanged'] ++
+        events.push({
+          event: 'peer.exchanged',
+          count: eventCount['peer.exchanged'],
+          entry: entry,
+        })
+      })
+
       db2.events.on('replicated', (address) => {
         eventCount['replicated'] ++
         events.push({
@@ -203,6 +213,7 @@ Object.keys(testAPIs).forEach(API => {
 
               assert.equal(eventCount['replicate'], expectedEventCount)
               assert.equal(eventCount['replicate.progress'], expectedEventCount)
+              assert.equal(eventCount['peer.exchanged'] >= expectedPeerExchangeCount, true, 'insuficcient peer.exchanged events fired')
 
               const replicateEvents = events.filter(e => e.event === 'replicate')
               assert.equal(replicateEvents.length, expectedEventCount)
@@ -240,9 +251,10 @@ Object.keys(testAPIs).forEach(API => {
     it('emits correct replication info on fresh replication', async () => {
       return new Promise(async (resolve, reject) => {
         let finished = false
-        let eventCount = { 'replicate': 0, 'replicate.progress': 0, 'replicated': 0 }
+        let eventCount = { 'replicate': 0, 'replicate.progress': 0, 'replicated': 0, 'peer.exchanged': 0 }
         let events = []
         let expectedEventCount = 512
+        let expectedPeerExchangeCount = 1
 
         // Trigger replication
         let adds = []
@@ -291,6 +303,16 @@ Object.keys(testAPIs).forEach(API => {
           })
         })
 
+        db2.events.on('peer.exchanged', (address, entry) => {
+          eventCount['peer.exchanged'] ++
+          // console.log("[replicate] ", '#' + eventCount['replicate'] + ':', db2.replicationStatus.progress, '/', db2.replicationStatus.max, '| Tasks (in/queued/running/out):', db2._loader.tasksRequested, '/',  db2._loader.tasksQueued,  '/', db2._loader.tasksRunning, '/', db2._loader.tasksFinished)
+          events.push({
+            event: 'peer.exchanged',
+            count: eventCount['peer.exchanged'],
+            entry: entry,
+          })
+        })
+
         db2.events.on('replicated', (address, length) => {
           eventCount['replicated'] += length
           // console.log("[replicated]", '#' + eventCount['replicated'] + ':', db2.replicationStatus.progress, '/', db2.replicationStatus.max, '| Tasks (in/queued/running/out):', db2._loader.tasksRequested, '/',  db2._loader.tasksQueued,  '/', db2._loader.tasksRunning, '/', db2._loader.tasksFinished, "|")
@@ -331,6 +353,7 @@ Object.keys(testAPIs).forEach(API => {
             try {
               assert.equal(eventCount['replicate'], expectedEventCount)
               assert.equal(eventCount['replicate.progress'], expectedEventCount)
+              assert.equal(eventCount['peer.exchanged'], expectedPeerExchangeCount)
 
               const replicateEvents = events.filter(e => e.event === 'replicate')
               assert.equal(replicateEvents.length, expectedEventCount)
@@ -360,9 +383,10 @@ Object.keys(testAPIs).forEach(API => {
     it('emits correct replication info in two-way replication', async () => {
       return new Promise(async (resolve, reject) => {
         let finished = false
-        let eventCount = { 'replicate': 0, 'replicate.progress': 0, 'replicated': 0 }
+        let eventCount = { 'replicate': 0, 'replicate.progress': 0, 'replicated': 0, 'peer.exchanged': 0 }
         let events = []
         let expectedEventCount = 100
+        let expectedPeerExchangeCount = 100
 
         // Trigger replication
         let adds = []
@@ -412,6 +436,15 @@ Object.keys(testAPIs).forEach(API => {
           })
         })
 
+        db2.events.on('peer.exchanged', (address, entry) => {
+          eventCount['peer.exchanged'] ++
+          events.push({
+            event: 'peer.exchanged',
+            count: eventCount['peer.exchanged'],
+            entry: entry,
+          })
+        })
+
         db2.events.on('replicated', (address, length) => {
           eventCount['replicated'] += length
           const values = db2.iterator({limit: -1}).collect()
@@ -451,6 +484,7 @@ Object.keys(testAPIs).forEach(API => {
               assert.equal(eventCount['replicate'], expectedEventCount)
               assert.equal(eventCount['replicate.progress'], expectedEventCount)
               assert.equal(eventCount['replicated'], expectedEventCount)
+              assert.equal(eventCount['peer.exchanged'] >= expectedPeerExchangeCount, true, 'insuficcient peer.exchanged events fired')
 
               const replicateEvents = events.filter(e => e.event === 'replicate')
               assert.equal(replicateEvents.length, expectedEventCount)
